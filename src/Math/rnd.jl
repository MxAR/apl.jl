@everywhere module rnd
	##===================================================================================
	##	expontential distriubtion
	##		a: expoential scalar
	##===================================================================================
	export rexp

	##-----------------------------------------------------------------------------------
	function rexp{R<:Number, N<:Integer}(a::R, d::N... = (1))
		return -a*log.(rand(d))
	end


	##===================================================================================
	##	hypoexponential distribution
	##		a: exponential scalar
	##		n: number sums taken
	##===================================================================================
	export rhexp
	
	##-----------------------------------------------------------------------------------
	function rhexp{R<:Number, N<:Integer}(a::R, n::N, d::N... = (1))
		r = zeros(R, d)
		@inbounds for i = 1:n
			r += log.(rand(d))
		end
		return -a*r
	end 


	##===================================================================================
	##	standard triangular distribution
	##===================================================================================
	export rstri

	##-----------------------------------------------------------------------------------
	function rstri{N<:Integer}(d::N... = (1))
		return rand(d).-rand(d)
	end


	##===================================================================================
	##	standard power distribution
	##		a: power exponent
	##===================================================================================
	export rspow

	##-----------------------------------------------------------------------------------
	function rspow{R<:Number, N<:Integer}(a::R, d::N... = (1))
		return rand(d).^(1/a)
	end


	##===================================================================================
	##	exponential power distribution
	##		a: exponential divisor
	##		b: power exponent
	##===================================================================================
	export rexpp

	##-----------------------------------------------------------------------------------
	function rexpp{R<:Number, N<:Integer}(a::R, b::R, d::N... = (1))
			return (log.(1-log.(1-rand(d)))/a).^(1/b)
	end
end
